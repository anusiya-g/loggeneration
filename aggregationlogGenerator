import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

public class LogsGeneratorFinal {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        Map<String, String> logdata = new HashMap<>();
        logdata.put("failed", "D:\\anusiya\\jsonlogs\\failed.json");
        logdata.put("success", "D:\\anusiya\\jsonlogs\\success.json");
        logdata.put("process", "D:\\anusiya\\jsonlogs\\process.json");

        System.out.print("Enter the number of actions: ");
        int actionsCount = scanner.nextInt();
        scanner.nextLine();


        List<Map<String, Object>> actionsConfig = new ArrayList<>();
        Map<String, List<Map<String, List<String>>>> linkedFieldsMap = new HashMap<>();
        for (int i = 1; i <= actionsCount; i++) {
            System.out.println("\nAction " + i + ":");

            System.out.print("Enter the action name from logdata (e.g., failed or success): ");
            String actionName = scanner.nextLine();
            while (!logdata.containsKey(actionName)) {
                System.out.print("Invalid action name. Enter again: ");
                actionName = scanner.nextLine();
            }

            Map<String, Object> actionConfig = new HashMap<>();
            actionConfig.put("actionName", actionName);

            System.out.print("Enter the number of events in each trigger for this action: ");
            int eventCount = scanner.nextInt();
            actionConfig.put("eventCount", eventCount);

            System.out.print("Enter the duration (in seconds) for this action: ");
            int duration = scanner.nextInt();
            actionConfig.put("duration", duration);
            scanner.nextLine();

            System.out.print("Enter the constant fields (comma-separated, e.g., username,deviceName): ");
            String constantFieldsInput = scanner.nextLine();
            List<String> constantFields = constantFieldsInput.isEmpty() ? new ArrayList<>() : Arrays.asList(constantFieldsInput.split(","));
            actionConfig.put("constantFields", constantFields);

            if (!constantFields.isEmpty()) {
                Map<String, Queue<Map<String, Object>>> fieldConditions = new LinkedHashMap<>();

                for (String field : constantFields) {
                    System.out.println("Defining rules for field: " + field);
                    System.out.print("Specify the no of combination applied to this field: ");
                    int combination=scanner.nextInt();
                    System.out.print("How many conditions do you want to define for " + field + "?: ");
                    int conditionsCount = scanner.nextInt();
                    scanner.nextLine();

                    Queue<Map<String, Object>> conditions = new LinkedList<>(); // Create a new instance for each field

                    for (int j = 1; j <= conditionsCount; j++) {
                        System.out.println("Condition " + j + ":");

                        System.out.print("Select the metric to apply (count, sum, dcount, avg, min, max): ");
                        String metric = scanner.nextLine();

                        System.out.print("Specify the field in which metric has to apply: ");
                        String metricField = scanner.nextLine();

                        scanner.nextLine();
                        System.out.print("Select the comparison operator (>, <, >=, <=, =, !=): ");
                        String operator = scanner.nextLine().trim();

                        System.out.print("Whether the threshold value  in bytes format:yes/no: ");
                        String isBytes = scanner.nextLine().trim().toLowerCase();

                        Map<String, Object> condition = new HashMap<>();
                        if(isBytes.equals("yes")) {
                            System.out.println("Enter the threshold value: ");
                            Long bytesthresholdValue= Long.valueOf(scanner.nextLine());
                            condition.put("bytesThresholdValue", bytesthresholdValue);
                        }
                        else {

                            System.out.print("Enter the threshold value: ");
                            int thresholdValue = Integer.parseInt(scanner.nextLine());
                            condition.put("thresholdValue", thresholdValue);
                        }


                        condition.put("combination",combination);
                        condition.put("metric", metric);
                        condition.put("metricField", metricField);
                        condition.put("operator", operator);



                        conditions.add(condition);
                    }
                    if(conditionsCount==0){
                        actionConfig.put("combination",combination);
                    }
                    else {
                        fieldConditions.put(field, conditions);
                    }

                }
                if(fieldConditions.size()>0){
                    actionConfig.put("fieldConditions", fieldConditions);
                }

            }



            System.out.print("Enter the distinct fields (comma-separated or leave empty): ");
            String distinctFieldsInput = scanner.nextLine();
            List<String> distinctFields = distinctFieldsInput.isEmpty() ? new ArrayList<>() : Arrays.asList(distinctFieldsInput.split(","));
            actionConfig.put("distinctFields", distinctFields);
            System.out.print("Enter the source action for linked fields (or leave empty): ");
            String sourceAction = scanner.nextLine();
            if (!sourceAction.isEmpty()) {
                System.out.print("Enter the linked fields (comma-separated, e.g., username,deviceName): ");
                String linkedFieldsInput = scanner.nextLine();
                List<String> linkedFields = linkedFieldsInput.isEmpty() ? new ArrayList<>() : Arrays.asList(linkedFieldsInput.split(","));

                linkedFieldsMap.putIfAbsent(sourceAction, new ArrayList<>());
                Map<String, List<String>> targetFieldsMap = new HashMap<>();
                targetFieldsMap.put(actionName, linkedFields);
                linkedFieldsMap.get(sourceAction).add(targetFieldsMap);
                System.out.println("lllllllll");
                System.out.println(linkedFieldsMap);
            }
            if (i > 1) {
                System.out.print("Does this action follow the previous one? (yes/no): ");
                String followResponse = scanner.nextLine().trim().toLowerCase();
                if (followResponse.equals("yes")) {
                    System.out.print("Enter the follow-by time (in seconds) after the previous action: ");
                    int followBy = scanner.nextInt();
                    actionConfig.put("followBy", followBy);
                    scanner.nextLine();
                } else {
                    actionConfig.put("followBy", 0);
                }
            }

            actionsConfig.add(actionConfig);
        }


        System.out.print("\nEnter the number of times the rule should trigger: ");
        int ruleTriggers = scanner.nextInt();
        scanner.nextLine();
        List<Map<String, String>> logs = generateLogs(ruleTriggers, actionsConfig, linkedFieldsMap);
        String outputFilePath = "generated_logs3.json";
        writeLogsToFile(logs, outputFilePath);
        System.out.println("\nLogs generated and written to: " + outputFilePath);
    }

    public static List<Map<String, String>> generateLogs(
            int ruleTriggers,
            List<Map<String, Object>> actionsConfig,
            Map<String, List<Map<String, List<String>>>> linkedFieldsMap
    ) {
        List<Map<String, String>> logs = new ArrayList<>();
        LocalDateTime baseTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        for (int i = 0; i < ruleTriggers; i++) {
            LocalDateTime actionTime = baseTime;

            Map<String,List<Map<String,String>>> logs1=new HashMap<>();

            for (Map<String, Object> actionConfig : actionsConfig) {
                String actionName = (String) actionConfig.get("actionName");
                int eventCount = (int) actionConfig.get("eventCount");
                int duration = (int) actionConfig.get("duration");
                int followBy = actionConfig.containsKey("followBy") ? (int) actionConfig.get("followBy") : 0;

                List<String> constantFields = (List<String>) actionConfig.get("constantFields");
                List<String> distinctFields = (List<String>) actionConfig.get("distinctFields");
                Map<String, List<Map<String, String>>> distinctVal = new HashMap<>();

                // Generate events for the current action
                for (int j = 0; j < eventCount; j++) {
                    LocalDateTime eventTime = actionTime.plusSeconds(j * (duration / Math.max(1, eventCount)));


                    Map<String, String> eventlog = new HashMap<>();
                    eventlog.put("MESSAGE", actionName.equals("failed") ? "Logon failed" : "Logon success");
                    eventlog.put("TIME", eventTime.format(formatter));
                    eventlog.put("SERVICENAME", "AuthService");
                    eventlog.put("IENAME", actionName);
                    int comb=0;
                    if (actionConfig.get("combination") != null) {
                        comb= (int) actionConfig.get("combination");
                    }

                    if (actionConfig.containsKey("fieldConditions")) {


                        Map<String, Queue<Map<String, Object>>> fieldConditions =  (Map<String, Queue<Map<String, Object>>>) actionConfig.get("fieldConditions");

                        System.out.println(fieldConditions);
                        int c=0;

                        for (Map.Entry<String, Queue<Map<String, Object>>> entry : fieldConditions.entrySet()) {
                            String key = entry.getKey();
                            Queue<Map<String, Object>> conditions = entry.getValue();

                            if(conditions.isEmpty()){
                                eventlog.put(key,key+i);
                            }
                            else {
                                for (Map<String, Object> condition : conditions) {
                                    String metricField = (String) condition.get("metricField");
                                    String metric = (String) condition.get("metric");
                                    int combination=(int) condition.get("combination");
                                    int thresholdValue =0;
                                    if (condition.containsKey("thresholdValue")) {
                                        thresholdValue = (Integer) condition.get("thresholdValue");
                                    }
                                    String operator = (String) condition.get("operator");
                                    Long bytesThresholdValue =0L;
                                    if (condition.containsKey("bytesThresholdValue")) {
                                        bytesThresholdValue = (Long) condition.get("bytesThresholdValue");
                                    }
                                    int tempThreshold=thresholdValue;
                                    if(operator.equals(">")){
                                        tempThreshold=tempThreshold+1;
                                    }
                                    else if(operator.equals("<")){
                                        tempThreshold=thresholdValue-1;
                                    }
                                    if (metric.equals("count")) {

                                        processCountMetric(eventlog, distinctVal, key, metricField, tempThreshold, combination, c, logs);
                                        c++;
                                    }

                                    else if(metric.equals("sum")){
                                        if(bytesThresholdValue>0){
                                            Long totalBytes=0L;
                                            if(operator.equals('>')||operator.equals(">=")) {
                                               totalBytes = (Long) (bytesThresholdValue / combination) + (1024);

                                            }
                                            else{
                                                totalBytes = (Long) (bytesThresholdValue / combination) - (1024);
                                            }
                                            if(metricField.isEmpty()){
                                                Long perByte=totalBytes/10;
                                                for(int k1=0;k1<10;k1++){
                                                    if(!logs1.containsKey(actionName)){
                                                        List<Map<String,String>> newVal=new ArrayList<>();
                                                        Map<String,String> newLog=new HashMap<>(eventlog);
                                                        newLog.put(key, String.valueOf(perByte));
                                                        newVal.add(newLog);
                                                        logs1.put(actionName,newVal);
                                                    }
                                                    else{
                                                        Map<String,String> newLog=new HashMap<>(eventlog);
                                                        newLog.put(key, String.valueOf(perByte));
                                                        logs1.get(actionName).add(newLog);
                                                    }
                                                }
                                            }
                                            else{
                                                int cntt=0;
                                                for (int k = 1; k <=combination; k++) {

                                                   processCountMetric(eventlog, distinctVal, key,"", tempThreshold*tempThreshold, combination+1, c, logs);

                                                    for (String usernameKey : distinctVal.keySet()) {
                                                        List<Map<String, String>> usernameValues = distinctVal.get(usernameKey);
                                                        Long perByte=totalBytes/usernameValues.size();
                                                        for(int s1=0;s1<usernameValues.size();s1++) {
                                                            Map<String, String> values = usernameValues.get(s1);
                                                            values.put(metricField, String.valueOf(perByte));

                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }

                    else if (constantFields != null && !constantFields.isEmpty()) {


                            int maxthreshold = 5;
                            int cnt=0;
                            for (int c = 0; c < comb; c++) {
                                for (int m = 0; m < maxthreshold; m++) {

                                    if(!logs1.containsKey(actionName)){
                                        Map<String, String> newLog = new HashMap<>(eventlog);
                                        for(String field:constantFields){
                                            newLog.put(field, field+c);
                                        }

                                        List<Map<String,String>> logg=new ArrayList<>();
                                        logg.add(newLog);
                                        logs1.put(actionName,logg);
                                    }
                                    else {

                                        Map<String,String> newlog1=new HashMap<>(eventlog);
                                        for(String field:constantFields){
                                            newlog1.put(field, field+c);
                                        }

                                        logs1.get(actionName).add(newlog1);

                                    }
                                }
                            }


                    }

                    else{
                        if(!logs1.containsKey(actionName)){
                            List<Map<String,String>> val=new ArrayList<>();
                            Map<String,String> newlog2=new HashMap<>(eventlog);
                            val.add(newlog2);
                            logs1.put(actionName,val);
                        }
                        else{
                            Map<String,String> newlog2=new HashMap<>(eventlog);
                            logs1.get(actionName).add(newlog2);
                        }
                    }
                    int size = (actionConfig.get("fieldConditions") instanceof Map)
                            ? ((Map<String, Queue<Map<String, Object>>>) actionConfig.get("fieldConditions")).size()
                            : 0;
                    if(constantFields.size()!=size){
                        for(String field:constantFields) {
                            int c=1;
                            for (String key : distinctVal.keySet()) {
                                if (!key.contains(field)) {
                                    List<Map<String, String>> val = distinctVal.get(key);

                                    for (int v = 0; v < val.size(); v++) {
                                        Map<String, String> log = val.get(v);
                                        log.put(field,field+c);
                                    }

                                }
                                c++;
                            }
                        }
                    }

                    if (distinctFields != null && !distinctFields.isEmpty()) {
                        for (String field : distinctFields) {

                        }
                    }

                    if (j == eventCount - 1) {
                        actionTime = eventTime.plusSeconds(followBy);
                    }
                    for (String usernameKey : distinctVal.keySet()) {
                        List<Map<String, String>> usernameValues = distinctVal.get(usernameKey);
                        for(int s=0;s<usernameValues.size();s++){
                            Map<String,String> values=usernameValues.get(s);
                            if (logs1.containsKey(actionName)) {
                                logs1.get(actionName).add(values);
                            }
                            else {
                                List<Map<String,String>> l=new ArrayList<>();
                                l.add(values);
                                logs1.put(actionName,l);
                            }

                        }
                    }
                }
                System.out.println(distinctVal);


                System.out.println(logs1);



            }
            for (String sourceAction : linkedFieldsMap.keySet()) {
                    String actualAction = linkedFieldsMap.get(sourceAction).get(0).keySet().iterator().next(); // "success"
                    String valueField = linkedFieldsMap.get(sourceAction).get(0).get(actualAction).get(0); // "username"
                    Set<String> uniqueUsernames = logs1.get(sourceAction).stream()
                            .map(log -> log.get(valueField))
                            .filter(Objects::nonNull)
                            .collect(Collectors.toSet());
                    List<Map<String, String>> successLogs = logs1.get(actualAction);
                    Iterator<String> usernameIterator = uniqueUsernames.iterator();

                    for (Map<String, String> log : successLogs) {
                        if (usernameIterator.hasNext()) {
                            log.put(valueField, usernameIterator.next());
                        } else {

                            usernameIterator = uniqueUsernames.iterator();
                            log.put(valueField, usernameIterator.next());
                        }
                    }

            }

            if (!actionsConfig.isEmpty()) {
                Map<String, Object> lastActionConfig = actionsConfig.get(actionsConfig.size() - 1);
                int lastEventCount = (int) lastActionConfig.get("eventCount");
                int lastDuration = (int) lastActionConfig.get("duration");
                int totalDuration = lastEventCount * (lastDuration / Math.max(1, lastEventCount));
                baseTime = actionTime.plusSeconds(totalDuration);
            }

        }

        return logs;
    }

    public static void processCountMetric(Map<String, String> eventlog, Map<String, List<Map<String, String>>> distinctVal,
                                          String key, String metricField, int tempThreshold, int combination,
                                          int c, List<Map<String, String>> logs) {
        int cnt1=0;
        int count = 0;
        if (tempThreshold > 0) {
            for (int k = 1; k <= combination; k++) {
                if (c == 0) {
                    // Initialize distinctVal for the metricField or key
                    if (!metricField.isEmpty() ) {
                        if(k==1) {
                            processCountMetric(eventlog, distinctVal, key, "", tempThreshold * tempThreshold, combination + 1, c, logs);

                        }

                    } else {
                        List<Map<String, String>> sample = new ArrayList<>();
                        distinctVal.put(key + k, sample);
                    }
                }

                for (int l = 0; l < tempThreshold; l++) {
                    if (c == 0) {
                        if (!metricField.isEmpty()) {
                            if(!distinctVal.isEmpty()){

                                for (String usernameKey : distinctVal.keySet()) {
                                    List<Map<String, String>> usernameValues = distinctVal.get(usernameKey);
                                    Map<String,String> values=usernameValues.get(cnt1);
                                    values.put(metricField,metricField+k);

                                }

                            }
                        } else {
                            if (distinctVal.containsKey(key + k)) {
                                Map<String, String> newLog = new HashMap<>(eventlog);
                                newLog.put(key, key + k);
                                distinctVal.get(key + k).add(newLog);
                            }
                        }
                    } else {
                        for (String usernameKey : distinctVal.keySet()) {
                            List<Map<String, String>> usernameValues = distinctVal.get(usernameKey);

                            if (tempThreshold * combination <= usernameValues.size()) {

                                    String devicename = "devicename_" + k;

                                        Map<String, String> firstLog = usernameValues.get(count);
                                        firstLog.put("devicename", devicename);



                            }
                        }
                        count++;
                    }
                    cnt1++;
                }
            }
        }

    }

    public static void writeLogsToFile(List<Map<String, String>> logs, String filePath) {
        try (FileWriter fileWriter = new FileWriter(filePath)) {
            fileWriter.write("[\n");
            for (int i = 0; i < logs.size(); i++) {
                fileWriter.write("  " + logs.get(i).toString().replace("=", ": ").replace(", ", ",\n  ").replace("{", "{\n  ").replace("}", "\n  }"));
                if (i < logs.size() - 1) {
                    fileWriter.write(",");
                }
                fileWriter.write("\n");
            }
            fileWriter.write("]");
        } catch (IOException e) {
            System.err.println("Error writing logs to file: " + e.getMessage());
        }
    }
}
